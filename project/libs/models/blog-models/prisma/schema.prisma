// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "../../../../node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum PostType {
  video
  text
  quote
  photo
  link
}

enum PostStatus {
  published
  draft
}

model Post {
  postId                  Int        @id @default(autoincrement()) @map("post_id")
  userId                  String?    @map("user_id")
  postType                PostType   @default(text) @map("post_type")
  createdAt               DateTime   @default(now()) @map("created_at")
  publishAt               DateTime   @updatedAt @map("publish_at")
  postStatus              PostStatus @default(draft) @map("post_status")
  isReposted              Boolean    @default(false) @map("is_reposted")
  originalAuthorId        String     @default("") @map("original_authorId")
  originalPostId          String     @default("") @map("original_post_id")
  // title                   String     @default("")
  // videoURL                String     @default("") @map("video_url")
  tags                    String[]
  // publicationAnnouncement String     @default("") @map("publication_announcement")
  // publicationContent      String     @default("") @map("publication_content")
  // quoteContent            String     @default("") @map("quote_content")
  // quoteAuthor             String     @default("") @map("quote_author")
  // photoFile               String     @default("") @map("photo_file")
  // linkURL                 String     @default("") @map("link_url")
  // description             String     @default("")
  comments                Comment[]
  favorite                Favorite[]

  @@map("posts")
}

model Comment {
  commentId Int      @id @default(autoincrement()) @map("comment_id")
  message   String
  userId    String   @map("user_id")
  post      Post     @relation(fields: [postId], references: [postId], onDelete: Cascade, onUpdate: Cascade)
  postId    Int      @map("post_id")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("comments")
}

model Favorite {
  favoriteId Int      @id @default(autoincrement()) @map("favorite_id")
  post       Post     @relation(fields: [postId], references: [postId], onDelete: Cascade)
  postId     Int      @map("post_id")
  userId     String   @map("user_id")
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @default(now()) @updatedAt @map("updated_at")

  @@map("favorites")
}
